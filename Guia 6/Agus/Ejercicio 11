a)

semaforo listo;

int driver_init(){

    listo = semaforo_create(0);

    return 0;
}

int driver_write(int sector, int *data){

    listo.wait();

    if(IN(DOR_STATUS) == 0) {
        OUT(DOR_IO, 1);
        sleep(50);
    }

    int pista = sector/cantidad_sectores_por_pista();

    int sector_real = sector%cantidad_sectores_por_pista();

    OUT(ARM, pista);

    while(IN(ARM_STATUS) != 1){}

    OUT(SEEK_SECTOR, sector_real);

    escribir_datos(data);

    while(IN(DATA_READY) != 1){}

    OUT(DOR_IO, 0);
    sleep(200);
    
    listo.signal();

    return 0;
}



b)

semaforo listo;

semaforo continuar;

atomic<int> time_request;


int driver_init(){

    listo = semaforo_create(0);

    continuar = semaforo_create(0);

    timer = 0;

    request_irq(6, handler_1);

    request_irq(7, handler_2);

    return 0;
}

void handler_1(){
    continuar.signal();
}

void handler_2(){

    if(time_request.getAndAdd(0) > 0){

        if(time_request.getAndAdd(- 1) == 0){
            continuar.signal();
        }

    }

}


int driver_write(int sector, int *data){

    listo.wait();

    if(IN(DOR_STATUS) == 0) {
        OUT(DOR_IO, 1);
        time_request.getAndAdd(2);
        continuar.wait();
    }

    int pista = sector/cantidad_sectores_por_pista();

    int sector_real = sector%cantidad_sectores_por_pista();

    OUT(ARM, pista);

    continuar.wait();

    OUT(SEEK_SECTOR, sector_real);

    escribir_datos(data);

    continuar.wait();

    OUT(DOR_IO, 0);
    time_request.getAndAdd(5);
    continuar.wait();
    
    listo.signal();

    return 0;
}


int driver_remove(){

    free_irq(6);
    free_irq(7);

    return 0;
}